#!/usr/bin/env python

from optparse import OptionParser
from twisted.internet import reactor, defer
import uuid
import random
import os.path
import socket
import datetime
import time

import opennsa.topology
import opennsa.setup
import opennsa.nsa
import opennsa.cli.commands

TOPOLOGY_FILE = "SC2011-Topo-v5a.owl"
WSDL_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), '../wsdl')
PORT = 9080


def doInfo(info_id):
    topo = opennsa.topology.parseGOLERDFTopology(TOPOLOGY_FILE)
    if ":stp:" in info_id:
        stp = topo.getSTP(info_id)
        if stp:
            print stp.urn()
            print "  network: %s" % topo.getNetwork(stp.network).name
            dest = stp.dest_stp
            if dest:
                print "  connectedTo: %s" % stp.dest_stp.urn()
    else:
        net = topo.getNetwork(info_id)
        print net.location
        for ep in net.getEndpoints():
            print "nsa.STP('%s','%s')" % (net.name,ep)
        print 80*"-"
        

def getNSA(network):
    topo = opennsa.topology.parseGOLERDFTopology(TOPOLOGY_FILE)
    srcNet = topo.getNetwork(network)
    return srcNet.nsa
    
@defer.inlineCallbacks
def doTerminate(terminateArgs):
    network = terminateArgs[0]
    conId = terminateArgs[1]
    client,client_nsa = createClient()
    _ = yield client.terminate(client_nsa, nsa, None, conId)
    print "Reservation terminated"


@defer.inlineCallbacks
def doQuery(queryArgs):
    nsa = queryArgs[0]
    if not "http" in nsa:
        nsa = getNSA(nsa)
    query = queryArgs[1]
    if query == "None":
        query = None
    print "Querying %s for %s" % (nsa,query)
    client,client_nsa = createClient()
    qr = yield client.query(client_nsa, nsa, None, "Summary", connection_ids = [ query ] )
    for res in qr.reservationSummary:
        print "global-reservation-id: " + str(res.globalReservationId)
        print "description: " + str(res.description)
        print "schedule: %s -- %s" % (res.serviceParameters.schedule.startTime, res.serviceParameters.schedule.endTime)
        print "bandwidth: " + str(res.serviceParameters.bandwidth.desired)
        print "status: " + str(res.connectionState)
        if hasattr(res,"path"):
            if hasattr(res.path,"stpList"):
                print "stplist: %s" % (res.path.stpList.stp)
            else:
                print "stpList: " + str([res.path.sourceSTP.stpId,res.path.destSTP.stpId]) 

@defer.inlineCallbacks
def doReserve(reservation):
    topo = opennsa.topology.parseGOLERDFTopology(TOPOLOGY_FILE)
    srcNet = topo.getNetwork(reservation[0])
    dstNet = topo.getNetwork(reservation[2])
    srcSTP = srcNet.getEndpoint(reservation[1])
    dstSTP = dstNet.getEndpoint(reservation[3])
    provider_nsa = srcNet.nsa
    print "Reserving (%s,%s) to (%s,%s) at %s" % (srcNet,srcSTP,dstNet,dstSTP,provider_nsa)
    # Setting some defaults for now, to fill in later
    start_time=None
    end_time=None
    description='CLI Test Connection'
    # Constructing the ServiceParamaters
    if not start_time:
        start_time = datetime.datetime.utcfromtimestamp(time.time() + 120 ) # two minutes from now
    if not end_time:
        end_time   = start_time + datetime.timedelta(minutes=2) # two minutes later
    connection_id = "urn:uuid:%s" % uuid.uuid1()
    global_reservation_id = 'gid-%s' % random.randrange(1000,10000)
    bwp = opennsa.nsa.BandwidthParameters(1000)
    service_params  = opennsa.nsa.ServiceParameters(start_time, end_time, srcSTP, dstSTP, bandwidth=bwp)
    client,client_nsa = createClient()
    # Send the reservation and wait for response
    r = yield client.reserve(client_nsa, provider_nsa, None, global_reservation_id, description, connection_id, service_params)
    print "Reservation created. Connection ID:", connection_id
    
def createClient():
    # Constructing the client NSA
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.connect(("gmail.com",80))
    host = s.getsockname()[0]
    s.close()
    client, service, factory = opennsa.setup.createClient(host, PORT, WSDL_DIR)
    client_nsa = opennsa.nsa.NetworkServiceAgent('OpenNSA-commandline', 'http://%s:%s/NSI/services/ConnectionService' % (host,PORT))
    reactor.listenTCP(PORT, factory)
    return client,client_nsa

def runDefer(d):
    d.addErrback(lambda x : x.printTraceback())
    d.addBoth(lambda _ : reactor.stop())
    reactor.run()

def doMain():
    parser = OptionParser()
    parser.add_option("-f", "--file", dest="filename",
                      help="write report to FILE", metavar="FILE")
    parser.add_option("-i","--info",
                        action="store",dest="info",
                        help="provide info about an id")
    parser.add_option("-r","--reserve",
                        action="store",dest="reserve",nargs=4,
                        help="make a reservation between two stps both defined by network and id")
    parser.add_option("-q","--query",
                        action="store",dest="query",nargs=2,
                        help="query a network about a reservation, requires network and query")
    parser.add_option("-t","--terminate",
                        action="store",dest="terminate",nargs=2,
                        help="terminate a reservation at a network, requires network and conn-id")
    (options, args) = parser.parse_args()

    cmd = None
    if options.info:
        doInfo(options.info)
    elif options.reserve:
        cmd = doReserve
        opts = options.reserve
    elif options.query:
        cmd = doQuery
        opts = options.query
    elif options.terminate:
        cmd = doTerminate
        opts = options.terminate
    if cmd:
        d = defer.maybeDeferred(cmd,opts)
        runDefer(d)
    


if __name__ == '__main__':
    doMain()